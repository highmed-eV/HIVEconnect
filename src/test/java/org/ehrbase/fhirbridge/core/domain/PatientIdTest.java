package org.ehrbase.fhirbridge.core.domain;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(MockitoExtension.class)
class PatientIdTest {

    @Test
    void testGetUuid() {
        // Arrange
        PatientId patientId = new PatientId();
        // Note: UUID is generated by JPA, we can only test the getter

        // Act
        UUID result = patientId.getUuid();

        // Assert
        assertThat(result).isNull(); // Initially null as it's generated by JPA
    }

    @Test
    void testGetUuidAsString() {
        // Arrange
        PatientId patientId = new PatientId();
        // Note: UUID is generated by JPA, we can only test the getter

        // Act
        String result = patientId.getUuidAsString();

        // Assert
        assertThat(result).isNull(); // Initially null as it's generated by JPA
    }

    @Test
    void testEqualsWithSameObject() {
        // Arrange
        PatientId patientId = new PatientId();

        // Assert
        assertThat(patientId).isEqualTo(patientId);
    }

    @Test
    void testEqualsWithNull() {
        // Arrange
        PatientId patientId = new PatientId();

        // Assert
        assertThat(patientId).isNotEqualTo(null);
    }

    @Test
    void testEqualsWithDifferentClass() {
        // Arrange
        PatientId patientId = new PatientId();

        // Assert
        assertThat(patientId).isNotEqualTo(new Object());
    }

    @Test
    void testEqualsWithSameInstance() {
        // Arrange
        PatientId patientId1 = new PatientId();
        PatientId patientId2 = patientId1;

        // Assert
        assertThat(patientId1).isEqualTo(patientId2);
    }

    @Test
    void testEqualsWithDifferentInstance() {
        // Arrange
        PatientId patientId1 = new PatientId();
        PatientId patientId2 = new PatientId();
        patientId1.setUuid(UUID.randomUUID());

        // Assert
        assertThat(patientId1).isNotEqualTo(patientId2);
    }

    @Test
    void testHashCode() {
        // Arrange
        PatientId patientId1 = new PatientId();
        PatientId patientId2 = patientId1;

        // Assert
        assertThat(patientId1.hashCode()).isEqualTo(patientId2.hashCode());
    }

    @Test
    void testToString() {
        // Arrange
        PatientId patientId = new PatientId();

        // Act
        String result = patientId.toString();

        // Assert
        assertThat(result).contains("PatientId");
    }
} 